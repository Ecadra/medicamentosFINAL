/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Interfaces;
import Implementaciones.AdministracionImplementacion;
import Interfaces.InterfazAdministracion;
import Modelos.Administracion;
import java.awt.Color;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.Timestamp; 


/**
 *
 * @author ADM
 */
public class InterfazAdministracion extends javax.swing.JFrame {
    
    DefaultTableModel model; //Definición del DTM
    Administracion administracion = new Administracion();
    AdministracionImplementacion admImp = new AdministracionImplementacion();
    java.sql.Timestamp fecha = null;
    boolean estado;
    /**
     * Creates new form InterfazAdministracion
     */
    public InterfazAdministracion() throws Exception {
        initComponents();
        this.setLocationRelativeTo(null);
        model=(DefaultTableModel) tblAdministracion.getModel(); 
        CrearTabla();
        initCmbEnf(cmbEnfAdm);
        initCmbDosis(cmbDosis);        
    }
    
    
    public void CrearTabla()
    {
        model.setRowCount(0);   
        
        try{
            admImp.RellenarTablaAdministracion(model,administracion);
        }catch(Exception err)
        {
            
        }
    } 
    
    public final void initCmbEnf(JComboBox comb) throws Exception{
        MetodosAdministracion m = new AdministracionImplementacion();
        JComboBox combo= m.obtenerEnfermera();
        comb.setModel(combo.getModel());
    }
    
     public final void initCmbDosis(JComboBox comb) throws Exception{
        MetodosAdministracion m = new AdministracionImplementacion();
        JComboBox combo= m.obtenerDosis();
        comb.setModel(combo.getModel());
    }
     
     public final void initCmbNomMed(JComboBox comb) throws Exception{
        MetodosAdministracion m = new AdministracionImplementacion();
        JComboBox combo= m.obtenerNombreMed();
        comb.setModel(combo.getModel());
    }
     
    public final void initCmbCon(JComboBox comb) throws Exception{
        MetodosAdministracion m = new AdministracionImplementacion();
        JComboBox combo= m.obtenerNombreFi();
        comb.setModel(combo.getModel());
    }
    
    public void mensajeAdvertencia(String mensaje, String titulo){
        JOptionPane.showMessageDialog(null,mensaje,titulo,0);
    }
    public void mensajeInformativo(String mensaje, String titulo){
        JOptionPane.showInternalMessageDialog(null, mensaje, titulo, JOptionPane.INFORMATION_MESSAGE);
    }
    
     public void activarAdministracion(boolean activado){
        pnlDatos.setEnabled(activado);
        lblEnfermera.setEnabled(activado);
        lblDosis.setEnabled(activado);
        lblAdministracion.setEnabled(activado);
        lblDetalles.setEnabled(activado);
        lblFechaHr.setEnabled(activado);
        btnRegistrar.setEnabled(activado);
    }
     
     public void limpiarAdministracion(){
        ///Se limpia el campo de texto
        cmbEnfAdm.setSelectedIndex(0);
        cmbDosis.setSelectedIndex(0);
        cmbBolean.setSelectedIndex(0);
        txtDetalles.setText("");
        jdate.setDate(null);
    }
     
      private void CrearTablaBuscar(String busqueda) throws Exception
    {
        model.setRowCount(0);
        admImp.buscar(model, administracion, cmbAtributo.getSelectedIndex(), busqueda);   
    }
    
     public boolean validarDatos(){
        // Validación del nombre de la enfermera
        if (txtDetalles.getText().equals("") || 
                txtDetalles.getText().equals("Detalles") || 
                txtDetalles.getText().equals("Ingrese una descripción")) {
            mensajeAdvertencia("Dato inválido.\n"
                    + "Favor de verificar que:\n"
                    + "-> No contenga acentos\n"
                    + "-> No contenga caracteres especiales\n"
                    + "-> Haya registrado correctamente la descripción correctamente\n", "Nombre inválido");
            return false;
        }
        return true;
     }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlDatos = new javax.swing.JPanel();
        jdate = new com.toedter.calendar.JDateChooser();
        btnRegistrar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        lblEnfermera = new javax.swing.JLabel();
        lblDosis = new javax.swing.JLabel();
        lblAdministracion = new javax.swing.JLabel();
        lblDetalles = new javax.swing.JLabel();
        lblFechaHr = new javax.swing.JLabel();
        cmbEnfAdm = new javax.swing.JComboBox<>();
        cmbDosis = new javax.swing.JComboBox<>();
        cmbBolean = new javax.swing.JComboBox<>();
        txtDetalles = new javax.swing.JTextField();
        btnLimpiar = new javax.swing.JButton();
        pnlRegistros = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAdministracion = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        txtSrcEnf = new javax.swing.JTextField();
        cmbAtributo = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        btnCancelar = new javax.swing.JButton();
        btnNewAdministracion = new javax.swing.JButton();
        btnInicio = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        pnlDatos.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Datos administración"));

        jdate.setDateFormatString("yyyy/MM/dd HH:mm:ss");

        btnRegistrar.setText("Registrar");
        btnRegistrar.setEnabled(false);
        btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarActionPerformed(evt);
            }
        });

        btnActualizar.setText("Actualizar");
        btnActualizar.setEnabled(false);
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.setEnabled(false);
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        lblEnfermera.setText("Nombre enfermera:");
        lblEnfermera.setEnabled(false);

        lblDosis.setText("Tipo de dosis:");
        lblDosis.setEnabled(false);

        lblAdministracion.setText("Adminstración correcta:");
        lblAdministracion.setEnabled(false);

        lblDetalles.setText("Detalles:");
        lblDetalles.setEnabled(false);

        lblFechaHr.setText("Fecha y hora:");
        lblFechaHr.setEnabled(false);

        cmbBolean.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Si", "No" }));

        txtDetalles.setText("Detalles");
        txtDetalles.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDetallesFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDetallesFocusLost(evt);
            }
        });

        btnLimpiar.setText("Limpiar Campos");
        btnLimpiar.setEnabled(false);

        javax.swing.GroupLayout pnlDatosLayout = new javax.swing.GroupLayout(pnlDatos);
        pnlDatos.setLayout(pnlDatosLayout);
        pnlDatosLayout.setHorizontalGroup(
            pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDatosLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblEnfermera)
                    .addComponent(lblDosis))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cmbEnfAdm, 0, 184, Short.MAX_VALUE)
                    .addComponent(cmbDosis, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(255, 255, 255)
                .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnActualizar)
                    .addComponent(btnRegistrar)
                    .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDatosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblDetalles)
                    .addComponent(lblAdministracion)
                    .addComponent(lblFechaHr))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbBolean, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlDatosLayout.createSequentialGroup()
                        .addComponent(txtDetalles, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(126, 126, 126)
                        .addComponent(btnLimpiar))
                    .addComponent(jdate, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlDatosLayout.setVerticalGroup(
            pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDatosLayout.createSequentialGroup()
                .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlDatosLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblEnfermera)
                            .addComponent(cmbEnfAdm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnRegistrar))
                        .addGap(18, 18, 18)
                        .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblDosis)
                            .addComponent(cmbDosis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblAdministracion)
                            .addComponent(cmbBolean, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblDetalles)
                            .addComponent(txtDetalles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 5, Short.MAX_VALUE))
                    .addGroup(pnlDatosLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnActualizar)
                        .addGap(18, 18, 18)
                        .addComponent(btnEliminar)
                        .addGap(42, 42, 42)))
                .addComponent(btnLimpiar)
                .addGap(9, 9, 9)
                .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblFechaHr)
                    .addComponent(jdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41))
        );

        pnlRegistros.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Registros administración"));

        tblAdministracion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Enfermera", "Tipo de dodis", "<html>Correcta <br> Administración</html>", "Detalles", "Fecha y Hora"
            }
        ));
        tblAdministracion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblAdministracionMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblAdministracion);

        jLabel1.setText("Búsqueda");

        txtSrcEnf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSrcEnfKeyReleased(evt);
            }
        });

        cmbAtributo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Enfermera" }));

        jLabel2.setText("Atributo:");

        javax.swing.GroupLayout pnlRegistrosLayout = new javax.swing.GroupLayout(pnlRegistros);
        pnlRegistros.setLayout(pnlRegistrosLayout);
        pnlRegistrosLayout.setHorizontalGroup(
            pnlRegistrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRegistrosLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(txtSrcEnf, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmbAtributo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(322, Short.MAX_VALUE))
            .addGroup(pnlRegistrosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        pnlRegistrosLayout.setVerticalGroup(
            pnlRegistrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRegistrosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlRegistrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtSrcEnf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbAtributo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                .addGap(15, 15, 15))
        );

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnNewAdministracion.setText("Nuevo registro");
        btnNewAdministracion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewAdministracionActionPerformed(evt);
            }
        });

        btnInicio.setText("Regresar al Menu");
        btnInicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInicioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlRegistros, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(pnlDatos, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnCancelar)
                                .addGap(30, 30, 30)
                                .addComponent(btnNewAdministracion)))
                        .addGap(22, 22, 22)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(btnInicio)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(btnInicio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlDatos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelar)
                    .addComponent(btnNewAdministracion))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlRegistros, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
     CrearTabla();
    }//GEN-LAST:event_formWindowOpened

    private void btnInicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInicioActionPerformed
   /* try{
           Home inicio = new Home();
            inicio.setVisible(true);
            // Cerrar la ventana
            dispose();  
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "Ocurrió un error",
                    "Error",0);

        }
        */
    }//GEN-LAST:event_btnInicioActionPerformed

    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarActionPerformed
     if (validarDatos()) {
    Administracion administracion = new Administracion();
    boolean aux = true;
    Date dateE = jdate.getDate();

    if (dateE == null) {
        JOptionPane.showMessageDialog(null, "Es necesario que seleccione una fecha", "Error de entrada", JOptionPane.WARNING_MESSAGE);
        aux = false;
    } else {
        long dia = dateE.getTime();
        fecha = new java.sql.Timestamp(dia);
    }

    administracion.setEnf_nombre((String) cmbEnfAdm.getSelectedItem());
    administracion.setDescripcion_dosis((String) cmbDosis.getSelectedItem());

    if (cmbBolean.getSelectedItem().equals("Si")) {
        estado = true;
    } else {
        estado = false;
    }

    administracion.setAdm_estado(estado);
    administracion.setAdm_detalles(txtDetalles.getText());
    administracion.setAdm_fecha_hr(fecha);

    if (aux) {
        try {
            MetodosAdministracion metodosAdministracion = new AdministracionImplementacion();
            metodosAdministracion.registrarAdministracion(administracion);
            mensajeInformativo("Registro realizado con éxito", "Registro exitoso");
        } catch (Exception r) {
            JOptionPane.showMessageDialog(null, "Error al guardar en la base de datos: " + r.getMessage(), "Error al guardar", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        mensajeAdvertencia("Registro no realizado", "Error de captura de datos");
    }

    limpiarAdministracion();
    activarAdministracion(false);
    CrearTabla();
    }

    }//GEN-LAST:event_btnRegistrarActionPerformed

    private void btnNewAdministracionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewAdministracionActionPerformed
        btnRegistrar.setEnabled(true);
        limpiarAdministracion();
    }//GEN-LAST:event_btnNewAdministracionActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        Administracion administracion = new Administracion();
        MetodosAdministracion metodosAdministracion = new AdministracionImplementacion();
        boolean aux = true;
        int afectadas=-1;
        if(JOptionPane.showConfirmDialog(null, "¿Está seguro que desea modificar el registro?\n"
                + "Verifique que el registro a modificar es el deseado", 
                "Advertencia de modificación de datos",
                JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION){         
            
            Date dateE = jdate.getDate();
               if(dateE ==null){
                JOptionPane.showMessageDialog(null,"Es necesario que seleccione un fecha","Error de entrada",JOptionPane.WARNING_MESSAGE);
                aux=false;
            }else{
                long dia= dateE.getTime();
                fecha= new java.sql.Timestamp(dia);
            try{
                administracion.setEnf_nombre((String) cmbEnfAdm.getSelectedItem());
                System.out.println((String)cmbEnfAdm.getSelectedItem());
                administracion.setDescripcion_dosis((String)cmbDosis.getSelectedItem());
                System.out.println((String)cmbDosis.getSelectedItem());
                if(cmbBolean.getSelectedItem() == "Si"){
                estado = true;
                }else{
                estado = false;
                }
                administracion.setAdm_estado(estado);
                administracion.setAdm_detalles(txtDetalles.getText());
                administracion.setAdm_fecha_hr(fecha);
                
               int id = metodosAdministracion.recuperarIdAdministracion(
                       (String)(tblAdministracion.getValueAt(tblAdministracion.getSelectedRow(), 0)),
                       (String)(tblAdministracion.getValueAt(tblAdministracion.getSelectedRow(), 1))
                       );  
                        //System.out.println("El id es: " + id);   Es una bandera
                        administracion.setId_administracion(id);
                        afectadas = metodosAdministracion.modificarAdministracion(administracion);
               //System.out.println("Las afectadas fueron: " + afectadas); 

               
                ///Limpia los campos de informacion
                limpiarAdministracion();
                ///Desactiva los campos y regresa al estado inicial de la interfaz
                activarAdministracion(false);
            
                btnEliminar.setEnabled(false);
                btnActualizar.setEnabled(false);
                btnLimpiar.setEnabled(false);
                btnNewAdministracion.setEnabled(true); 
            }catch(Exception ex){
                Logger.getLogger(InterfazAdministracion.class.getName()).log(Level.SEVERE, null, ex);
            }  
        }
        }
        CrearTabla();
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        btnNewAdministracion.setEnabled(true);
        tblAdministracion.clearSelection();
        limpiarAdministracion();
        btnEliminar.setEnabled(false);
        btnActualizar.setEnabled(false);
        btnRegistrar.setEnabled(false);
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void tblAdministracionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAdministracionMouseClicked
    if(!tblAdministracion.isEnabled()){

        }else{
            ///Para poder seleccionar algun alumno de la lista y modificarlo o eliminarlo
            activarAdministracion(true);
            //Se activan solo los botones para actualizar y eliminar
            btnRegistrar.setEnabled(false);
            btnActualizar.setEnabled(true);
            btnEliminar.setEnabled(true);
            btnLimpiar.setEnabled(false);
            btnNewAdministracion.setEnabled(false);

           
            cmbEnfAdm.setSelectedItem(tblAdministracion.getValueAt(tblAdministracion.getSelectedRow(), 0));
            cmbDosis.setSelectedItem(tblAdministracion.getValueAt(tblAdministracion.getSelectedRow(),1));
            cmbBolean.setSelectedItem(tblAdministracion.getValueAt(tblAdministracion.getSelectedRow(),2));
            txtDetalles.setText(tblAdministracion.getValueAt(tblAdministracion.getSelectedRow(),3).toString());
            jdate.setDate((Timestamp) tblAdministracion.getValueAt(tblAdministracion.getSelectedRow(), 4));
//jdate.setDate(new Date(((Timestamp) tblAdministracion.getValueAt(tblAdministracion.getSelectedRow(), 6)).getTime()));
 
        }
    }//GEN-LAST:event_tblAdministracionMouseClicked

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
    MetodosAdministracion metodosAdministracion = new AdministracionImplementacion();
        int afectadas = -1;
        if(JOptionPane.showConfirmDialog(null, "¿Está seguro que desea eliminar el registro?\n"
                + "Esta acción será irreversible\n"
                + "Verifique que el registro a eliminar es el deseado", 
                "Advertencia de eliminación de datos",
                JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION){
            try {
                afectadas = metodosAdministracion.eliminarAdministracion(
                        metodosAdministracion.recuperarIdAdministracion(
                                (String) cmbEnfAdm.getSelectedItem(),
                                (String)cmbDosis.getSelectedItem()));
          
                limpiarAdministracion();
                activarAdministracion(false);
                btnEliminar.setEnabled(false);
                btnActualizar.setEnabled(false);
                btnLimpiar.setEnabled(false);
                btnNewAdministracion.setEnabled(true);
            }catch(Exception ex){
                Logger.getLogger(InterfazAdministracion.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            if(afectadas== -1){
                mensajeAdvertencia("El registro no se ha eliminado debido a un"
                        + " error"  ,"Error de eliminación");
            }else{
                mensajeInformativo("Registro eliminado\n"
                + "Filas afectadas con la eliminacion: " + afectadas,"El registro se ha eliminado");
            }
        } 
        CrearTabla();
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void txtSrcEnfKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSrcEnfKeyReleased
      try {
            CrearTablaBuscar(txtSrcEnf.getText());
        } catch (Exception ex) {
            Logger.getLogger(InterfazAdministracion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtSrcEnfKeyReleased

    private void txtDetallesFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDetallesFocusLost
    if(txtDetalles.getText().equals("")){
            txtDetalles.setText("Ingrese una descripción");
            txtDetalles.setForeground(Color.gray);
        }else{
            txtDetalles.setForeground(Color.black);
        }  
    }//GEN-LAST:event_txtDetallesFocusLost

    private void txtDetallesFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDetallesFocusGained
     if(txtDetalles.getText().equals("Detalles") || 
                txtDetalles.getText().equals("Ingrese una descripción")){
            txtDetalles.setText("");
        }
    }//GEN-LAST:event_txtDetallesFocusGained

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfazAdministracion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfazAdministracion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfazAdministracion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfazAdministracion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new InterfazAdministracion().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(InterfazAdministracion.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnInicio;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnNewAdministracion;
    private javax.swing.JButton btnRegistrar;
    private javax.swing.JComboBox<String> cmbAtributo;
    private javax.swing.JComboBox<String> cmbBolean;
    private javax.swing.JComboBox<String> cmbDosis;
    private javax.swing.JComboBox<String> cmbEnfAdm;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private com.toedter.calendar.JDateChooser jdate;
    private javax.swing.JLabel lblAdministracion;
    private javax.swing.JLabel lblDetalles;
    private javax.swing.JLabel lblDosis;
    private javax.swing.JLabel lblEnfermera;
    private javax.swing.JLabel lblFechaHr;
    private javax.swing.JPanel pnlDatos;
    private javax.swing.JPanel pnlRegistros;
    private javax.swing.JTable tblAdministracion;
    private javax.swing.JTextField txtDetalles;
    private javax.swing.JTextField txtSrcEnf;
    // End of variables declaration//GEN-END:variables
}
